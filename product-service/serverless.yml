service: product-service
useDotenv: true
frameworkVersion: "3"

configValidationMode: error

plugins:
  - serverless-auto-swagger
  - serverless-webpack
  - serverless-offline

provider:
  name: aws
  runtime: nodejs18.x
  region: sa-east-1
  stage: ${opt:stage, 'dev'}
  profile: default
  environment:
    PRODUCTS_TABLE: shop-products
    STOCKS_TABLE: shop-stocks
    SNS_TOPIC_ARN:
      Ref: createProductTopic

custom:
  webpack:
    webpackConfig: "webpack.config.js"
    includeModules: true

resources:
  Resources:
    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PRODUCTS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    StocksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.STOCKS_TABLE}
        AttributeDefinitions:
          - AttributeName: productId
            AttributeType: S
        KeySchema:
          - AttributeName: productId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    CatalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue
    createProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: createProductTopic
    ProductEmailSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: email
        Endpoint: ${env:EMAIL}
        TopicArn:
          Ref: createProductTopic
    CatalogBatchItemsRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: catalogBatchItemsRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service: "lambda.amazonaws.com"
              Action: "sts:AssumeRole"
        Policies:
          - PolicyName: catalogBatchItemsPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Sid: PublishSNSMessage
                  Effect: Allow
                  Action: sns:Publish
                  Resource:
                    Ref: createProductTopic
                - Sid: ReceiveDeleteMessages
                  Effect: Allow
                  Action:
                    - sqs:ReceiveMessage
                    - sqs:DeleteMessage
                    - sqs:GetQueueAttributes
                  Resource:
                    Fn::GetAtt: [CatalogItemsQueue, Arn]

functions:
  getProductsList:
    handler: handler.getProductsList
    events:
      - httpApi:
          method: get
          path: /products
  getProductById:
    handler: handler.getProductById
    events:
      - httpApi:
          method: get
          path: /products/{productId}
  createProduct:
    handler: handler.createProduct
    events:
      - httpApi:
          method: post
          path: /products
  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
      - sqs:
          arn:
            Fn::GetAtt: [CatalogItemsQueue, Arn]
          batchSize: 5
    role: CatalogBatchItemsRole
